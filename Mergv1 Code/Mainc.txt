/*
 * File:   newmain.c
 * Author: john holmes MERG Member 8528
 * This code will blink 1 led connected to pin RC0 via a 220 ohm resistor to ground at a frequency of 1 second.
 * 
 * The pic being used is the PIC16F676 14 pin chip. Used in the MERG PMK 9 4 way traffic light kit
 * Import information required is from the data sheet is what registers you need to use this can be found on page 11-12.
 * http://ww1.microchip.com/downloads/en/devicedoc/40039f.pdf
 * This shows we need to use PORTA and PORTC registers for controlling input and output pins also TRISA and TRISC.
 * We has 6 pins we can use on PORTA which are RA0 to RA5 and a further 6 pins on PORTC which are RC) to RC5.
 * Pin 1 of the chip is the positive volt in supply pin.
 * 
 * Pin 14 is the ground pin.
 */

// PIC16F676 Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = INTRCIO   // Oscillator Selection bits (INTOSC oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function on RA5/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RA3/MCLR pin function select (RA3/MCLR pin function is digital I/O, MCLR internally tied to VDD)
#pragma config BOREN = OFF      // Brown-out Detect Enable bit (BOD disabled)
#pragma config CP = OFF         // Code Protection bit (Program Memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

#define _XTAL_FREQ 4000000    //Sets the frequency to be used to control the timing
#define LED1 RC0              //Sets up the led on pin 10 / RC0 and we can us LED1 in the code

void main(void) {             //Start of the main program
ANSEL = 0X00;                 //Sets All pins are digitals pins 
TRISC = 0X00;                 //Sets all PORTC as outputs C0 To C5
PORTC = 0b111111;

while(1){                     //Tell the code to loop for ever (1) means TRUE
    LED1 = 0;                 //Turns on led on my board but may turn off on yours
    __delay_ms(1000);        //This set the time delay. ** this value will have a upper limit depending on the chip FOR THIS IT SEEMS 25 SECONDS WILL WORK
    LED1 = 1;                 //Turns off led on my board
    __delay_ms(1000);         //delays again
}                             //Program never gets out of the loop so goes back to just after while(1))
}